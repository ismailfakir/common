
package net.cloudcentrik.common.restclient.example;

import net.cloudcentrik.common.util.ExceptionUtils;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContexts;
import org.apache.http.util.EntityUtils;

import javax.net.ssl.SSLContext;
import java.io.File;
import java.util.function.Consumer;

/**
 * This example demonstrates how to create secure connections with a custom SSL
 * context.
 * $ keytool -list -keystore /etc/ssl/certs/java/cacerts -v
 * $ keytool -list -keystore /usr/lib/jvm/java-8-oracle/jre/lib/security/cacerts -v
 */
public class ClientCustomSSL {


    /**
     * Path to your client-side SSL certificate in the PKCS12 format, as generated by OpenSSL.
     */
    final static String KEY_STORE_PATH = "cacerts";

    /**
     * PKCS12 file passphrase.
     */
    final static String KEY_STORE_PASSWORD = "changeit";

    /**
     * URL to connect to. That is, a server for which the above certificate is required.
     */
    final String URL = "https://httpbin.org/";

    public final static void main(String[] args) throws Exception {
        String classLoader = ClientCustomSSL.class.getClassLoader().getResource(KEY_STORE_PATH).getFile();
        File trustStorefile = new File(classLoader);

        // Trust own CA and all self-signed certs
        SSLContext sslcontext = SSLContexts.custom()
                //.loadTrustMaterial(new File("/etc/ssl/certs/java/cacerts"), "changeit".toCharArray(),
                .loadTrustMaterial(trustStorefile, KEY_STORE_PASSWORD.toCharArray(),
                        new TrustSelfSignedStrategy())
                .build();
        // Allow TLSv1 protocol only
        SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(
                sslcontext,
                new String[]{"TLSv1", "TLSv1.1", "TLSv1.2"},
                new String[]{"TLS_RSA_WITH_AES_128_CBC_SHA256"},
                SSLConnectionSocketFactory.getDefaultHostnameVerifier());
        CloseableHttpClient httpclient = HttpClients.custom()
                //.setSSLSocketFactory(sslsf)
                .setSSLSocketFactory(getSSLConnectionSocketFactory(KEY_STORE_PATH,KEY_STORE_PASSWORD))
                .build();
        try {

            HttpGet httpget = new HttpGet("https://httpbin.org/");
            //HttpGet httpget = new HttpGet("https://www.sharespine.com/");

            System.out.println("Executing request " + httpget.getRequestLine());

            CloseableHttpResponse response = httpclient.execute(httpget);
            try {
                HttpEntity entity = response.getEntity();

                System.out.println("----------------------------------------");
                System.out.println(response.getStatusLine());
                EntityUtils.consume(entity);
            } finally {
                response.close();
            }
        } finally {
            httpclient.close();
        }
    }

    public static SSLConnectionSocketFactory getSSLConnectionSocketFactory(String trustStore, String passphrase) {

        SSLConnectionSocketFactory sslsf = null;
        String classLoader = ClientCustomSSL.class.getClassLoader().getResource(trustStore).getFile();
        File trustStorefile = new File(classLoader);

        try {

            // Trust own CA and all self-signed certs
            SSLContext sslcontext = SSLContexts.custom()
                    //.loadTrustMaterial(new File("/etc/ssl/certs/java/cacerts"), "changeit".toCharArray(),
                    .loadTrustMaterial(trustStorefile, passphrase.toCharArray(),
                            new TrustSelfSignedStrategy())
                    .build();
            // Allow TLSv1 protocol only
            sslsf = new SSLConnectionSocketFactory(
                    sslcontext,
                    new String[]{"TLSv1", "TLSv1.1", "TLSv1.2"},
                    null,
                    SSLConnectionSocketFactory.getDefaultHostnameVerifier());

        } catch (Exception e) {
            e.printStackTrace();
        }


        return sslsf;

    }



}